syntax = "proto3";

package api.v1alpha1;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {version: "0.1.0"};
  external_docs: {
    url: "https://github.com/sanselme/sandbox";
    description: "Route Guide service";
  }
  //schemes: HTTPS;
};

// Interface exported by the server.
service RouteGuide {
  // Obtains the feature at a given position.
  rpc GetFeature(Point) returns (Feature) {
    option (google.api.http) = {
      get: "/api/v1alpha1/sandbox/feature"
      response_body: "location"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Feature at point"
      description: "Obtains the feature at a given position"
      tags: "Point"
    };
  }

  // Obtains the Features available within the given Rectangle. Results are
  // streamed rather than returned at once (e.g. in a response message with a
  // repeated field), as the rectangle may cover a large area and contain a
  // huge number of features.
  rpc ListenFeatures(Rectangle) returns (stream Feature) {
    option (google.api.http) = {
      get: "/api/v1alpha1/sandbox/features"
      response_body: "location"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Feature within rectangle"
      description: "Obtains the feature within the given Rectangle"
      tags: "Point"
    };
  }

  // Accepts a stream of Points on a route being traversed, returning a
  // RouteSummary when traversal is completed.
  rpc RecordRoute(stream Point) returns (RouteSummary) {
    option (google.api.http) = {get: "/api/v1alpha1/sandbox/summary"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Route summary"
      description: "Stream of Points on a route bein traversed"
      tags: "Summary"
    };
  }

  // Accepts a stream of RouteNotes sent while a route is being traversed,
  // while receiving other RouteNotes (e.g. from other users).
  rpc Routechat(stream RouteNote) returns (stream RouteNote) {
    option (google.api.http) = {
      get: "/api/v1alpha1/sandbox/notes"
      response_body: "location"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Route summary"
      description: "Stream of RouteNotes on a route bein traversed"
      tags: "Point"
    };
  }
}

// Points are represented as latitude-longitude pairs in the E7 representation
// (degrees multiplied by 10**7 and rounded to the nearest integer).
// Latitudes should be in the range +/- 90 degrees and longitude should be in
// the range +/- 180 degrees (inclusive).
message Point {
  int32 latitude = 1;
  int32 longitude = 2;
}

// A latitude-longitude rectangle, represented as two diagonally oposite
// points "lo" and "hi".
message Rectangle {
  // One corner of the rectangle.
  Point lo = 1;

  // The other corner of the rectangle.
  Point hi = 2;
}

// A feature names something at a given point.
// If a feature could not be named, the name is empty.
message Feature {
  // The name of the feature.
  string name = 1;

  // The point where the feature is detected.
  Point location = 2;
}

// A RouteNote is a message sent while at a given point.
message RouteNote {
  // The location from which the message is sent.
  Point location = 1;

  // The message to be sent.
  string message = 2;
}

// A RouteSummary is received in response to a RecordRoute rpc.
message RouteSummary {
  // The number of points received.
  int32 point_count = 1;

  // The number of known feature passed while traversing the route.
  int32 feature_count = 2;

  // The distance covered in metres.
  int32 distance = 3;

  // The duration of the traversal in seconds.
  int32 elapsed_time = 4;
}
