syntax = "proto3";

package api.v1;

message HealthCheckRequest {
  string  service = 1;
}

message HealthCheckResponse {
  enum ServingStatus {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
    SERVICE_UNKNOWN = 3; // used only by Watch
  }

  ServingStatus status = 1;
}

service Health {
  // if the requested service is unknown, the call will fail with status
  // NOT_FOUND
  rpc Check(HealthCheckRequest) returns (HealthCheckResponse);

  // performs a watch for the serving status of the requested service
  // the server will immediately send back a message indicating the curren serving status
  // it will then subsequently send a new message whenever the service's serving status changes
  //
  // if the requested service is unknown when the call is received, the server will send a message setting
  // the serving status to SERVICE_UNKNOWN but will *not* terminate the call
  // if at some future point, the serving status of the service becomes known, the
  // server will send a new message with the service's serving status
  //
  // if the call terminates with status UNIMPLEMENTED, then clients should assume this method is not
  // supported and should not retry the call
  // if the call terminates with any other status (including OK), clients should retry the call with
  // appropriate exponential backoff
  rpc Watch(HealthCheckRequest) returns (stream HealthCheckResponse);
}
